# main.py
from fastapi import FastAPI, Request, HTTPException, Depends
from pycoingecko import CoinGeckoAPI
from dotenv import load_dotenv
import requests
import os
from datetime import datetime
from sqlalchemy.orm import Session
from bd import Trade, DailyReport, get_db, SessionLocal  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ models.py
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger

app = FastAPI()

load_dotenv()

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞
TOKEN = os.getenv('TOKENTELEGRAM')
# ID –≤–∞—à–µ–≥–æ —á–∞—Ç–∞ –≤ Telegram
CHAT_ID = os.getenv('CHAT_IDTELEGRAM')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CoinGecko API
cg = CoinGeckoAPI()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤
buy_count = 0
sell_count = 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤ –≤ 3:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
def reset_counters(db: Session):
    global buy_count, sell_count

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É daily_reports
    daily_report = DailyReport(
        buy_count=buy_count,
        sell_count=sell_count
    )
    db.add(daily_report)
    db.commit()

    # –û–±–Ω—É–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏
    buy_count = 0
    sell_count = 0
    print("Counters reset at 3:00 AM. Previous values saved to daily_reports.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = BackgroundScheduler()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def scheduled_reset():
    db = SessionLocal()
    try:
        reset_counters(db)
    finally:
        db.close()

scheduler.add_job(
    scheduled_reset,
    trigger=CronTrigger(hour=3, minute=0),  # –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00
)
scheduler.start()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_telegram_message(text: str):
    url = f'https://api.telegram.org/bot{TOKEN}/sendMessage'
    payload = {
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": "Markdown",
        "disable_web_page_preview": True
    }
    response = requests.post(url, json=payload)
    return response.json()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
def format_number(value, default="N/A"):
    if isinstance(value, (int, float)):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–º
        if value == int(value):  # –ï—Å–ª–∏ —á–∏—Å–ª–æ —Ü–µ–ª–æ–µ
            return f"{int(value):,}"  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–µ–∑ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
        else:
            return f"{value:,.2f}"  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    return default  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ –º–æ–Ω–µ—Ç—ã –∏–∑ —Ç–∏–∫–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT ‚Üí BTC)
def extract_symbol(ticker: str):
    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ "USDT.P"
    if ticker.upper().endswith("USDT.P"):
        return ticker[:-6]  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–∏–º–≤–æ–ª–æ–≤
    return ticker  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–∏–∫–µ—Ä

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–Ω–µ—Ç–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pycoingecko
def get_market_data(symbol: str):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç
        coins_list = cg.get_coins_list()
        print(f"Coins list fetched. Total coins: {len(coins_list)}")

        # –ò—â–µ–º –º–æ–Ω–µ—Ç—É –ø–æ —Å–∏–º–≤–æ–ª—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, btc)
        matching_coins = [coin for coin in coins_list if coin["symbol"].lower() == symbol.lower()]
        print(f"Matching coins for symbol {symbol}: {matching_coins}")

        if not matching_coins:
            print(f"No matching coins found for symbol: {symbol}")
            return 'N/A', 'N/A'

        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –º–æ–Ω–µ—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞
        coin_id = matching_coins[0]["id"]
        print(f"Selected coin ID: {coin_id}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–µ
        coin_data = cg.get_coin_by_id(coin_id)
        print(f"Coin data for {coin_id}: {coin_data}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä—ã–Ω–æ—á–Ω—É—é –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é –∏ –æ–±—ä–µ–º –∑–∞ 24 —á–∞—Å–∞
        market_cap = coin_data.get('market_data', {}).get('market_cap', {}).get('usd', 'N/A')
        volume_24h = coin_data.get('market_data', {}).get('total_volume', {}).get('usd', 'N/A')

        # –£–±–∏—Ä–∞–µ–º –∫–æ–ø–µ–π–∫–∏ (—Ü–µ–Ω—Ç—ã), –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ü–µ–ª—É—é —á–∞—Å—Ç—å
        if isinstance(market_cap, (int, float)):
            market_cap = int(market_cap)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        if isinstance(volume_24h, (int, float)):
            volume_24h = int(volume_24h)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ

        print(f"Market Cap: {market_cap}, 24H Volume: {volume_24h}")
        return market_cap, volume_24h

    except Exception as e:
        print(f"Error in get_market_data: {e}")
        return 'N/A', 'N/A'

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Webhook –æ—Ç TradingView
@app.post("/webhook")
async def webhook(request: Request, db: Session = Depends(get_db)):
    try:
        global buy_count, sell_count

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç TradingView
        data = await request.json()
        print("Received data:", data)  # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        ticker = data.get('ticker', 'N/A')  # –ü—Ä–∏–º–µ—Ä: BTCUSDT.P, ETHUSDT.P –∏ —Ç.–¥.
        close = data.get('close', 'N/A')
        action = data.get('strategy.order.action', 'N/A')

        if action.lower() == 'buy':
            action_emoji = 'üü¢'
            buy_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ buy
        elif action.lower() == 'sell':
            action_emoji = 'üî¥'
            sell_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ sell
        else:
            action_emoji = '‚ö™'  # –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–ª—ã–π –∫—Ä—É–∂–æ–∫

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã –∏–∑ —Ç–∏–∫–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT.P ‚Üí BTC)
        symbol = extract_symbol(ticker)
        print(f"Extracted symbol: {symbol}")

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é –∏ –æ–±—ä–µ–º –∑–∞ 24 —á–∞—Å–∞
        market_cap, volume_24h = get_market_data(symbol)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message = (
            f"{action_emoji} *{action.upper()}* \n\n"
            f"*{symbol.upper()}*\n\n"
            f"PRICE - *{close}$*\n"
            f"MARKET CAP - *{format_number(market_cap)}$*\n"
            f"24H VOLUME - *{format_number(volume_24h)}$*\n\n"
            f"Trading on the MEXC exchange - *https://promote.mexc.com/r/scn7giWq*"
        )

        print(f"Message to be sent: {message}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        send_telegram_message(message)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        trade = Trade(action=action.lower(), symbol=symbol, price=close)
        db.add(trade)
        db.commit()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        return {"status": "success", "message": "Alert processed", "buy_count": buy_count, "sell_count": sell_count}

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        print("Error:", str(e))
        raise HTTPException(status_code=500, detail=str(e))

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=5000)