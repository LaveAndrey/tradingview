from fastapi import APIRouter, Request, HTTPException, BackgroundTasks
from pydantic import BaseModel
from datetime import datetime
from typing import Dict
import asyncio
import logging
from app.services.telegram import TelegramBot
from app.services.coingecko import CoinGeckoService
from app.config import Config

router = APIRouter()
logger = logging.getLogger(__name__)
coingecko = CoinGeckoService()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
SPREADSHEET_ID = Config.ID_TABLES  # ID –≤–∞—à–µ–π Google –¢–∞–±–ª–∏—Ü—ã

update_tasks: Dict[str, asyncio.Task] = {}


async def update_price_periodically(sheet, row_index: int, symbol: str, signal_price: float):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω"""
    try:
        intervals = [
            ('15m', 15 * 60),
            ('1h', 60 * 60),
            ('4h', 4 * 60 * 60),
            ('1d', 24 * 60 * 60)
        ]

        while True:
            current_price = coingecko.get_current_price(symbol)

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
            for interval_name, interval_seconds in intervals:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ D (4-—è –∫–æ–ª–æ–Ω–∫–∞)
                signal_time_str = sheet.cell(row_index, 4).value
                signal_time = datetime.strptime(signal_time_str, "%Y-%m-%d %H:%M:%S")
                time_passed = (datetime.utcnow() - signal_time).total_seconds()

                if time_passed >= interval_seconds:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–ª–æ–Ω–æ–∫
                    close_col = 5 + intervals.index((interval_name, interval_seconds)) * 2
                    change_col = close_col + 1

                    # –ï—Å–ª–∏ —è—á–µ–π–∫–∞ –µ—â—ë –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
                    if not sheet.cell(row_index, close_col).value:
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                        price_change = ((current_price - signal_price) / signal_price) * 100

                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
                        sheet.update_cell(row_index, close_col, current_price)
                        sheet.update_cell(row_index, change_col, f"{price_change:.2f}%")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            await asyncio.sleep(60)

    except Exception as e:
        logger.error(f"Price update task failed: {e}")
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if symbol in update_tasks:
            update_tasks.pop(symbol)

class WebhookPayload(BaseModel):
    ticker: str
    close: str
    strategy: dict


@router.post("/webhook")
async def webhook(request: Request):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
        if not hasattr(request.app.state, 'google_sheets'):
            logger.error("Google Sheets client not initialized")
            raise HTTPException(status_code=503, detail="Service unavailable")

        client = request.app.state.google_sheets

        try:
            sheet = client.open_by_key(SPREADSHEET_ID).sheet1
        except Exception as e:
            logger.error(f"Sheet access error: {str(e)}")
            raise HTTPException(status_code=500, detail="Spreadsheet access error")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...
        data = await request.json()
        logger.info(f"Processing data: {data}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        ticker = data.get('ticker', 'N/A')
        close = data.get('close', 'N/A')
        action = data.get('strategy.order.action', 'N/A')

        # –≠–º–æ–¥–∑–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
        action_emoji = 'üü¢' if action.lower() == 'buy' else 'üî¥' if action.lower() == 'sell' else '‚ö™'

        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
        symbol = coingecko.extract_symbol(ticker.lower())
        logger.info(f"Extracted symbol: {symbol.lower()}")

        try:
            price = float(close)
        except ValueError:
            logger.error(f"Invalid price format: {close}")
            raise HTTPException(status_code=400, detail="Invalid price format")

        # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        market_cap, volume_24h = coingecko.get_market_data(symbol)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        message = (
            f"{action_emoji} *{action.upper()}* \n\n"
            f"*{symbol.upper()}*\n\n"
            f"PRICE - *{price}$*\n"
            f"MARKET CAP - *{coingecko.format_number(market_cap)}$*\n"
            f"24H VOLUME - *{coingecko.format_number(volume_24h)}$*\n\n"
            f"Trading on the MEXC exchange - *https://promote.mexc.com/r/scn7giWq*"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        try:
            TelegramBot.send_message(text=message, chat_id=Config.CHAT_ID_TRADES)
            logger.info(message)
        except Exception as e:
            logger.error(f"Failed to send Telegram message: {e}")
            raise HTTPException(status_code=500, detail="Failed to send notification")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google –¢–∞–±–ª–∏—Ü—É
        try:
            sheet.append_row([
                symbol.upper(),
                action.lower(),
                price,
                datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                "", "", "", "", "", "", "", ""
            ])

            row_index = len(sheet.get_all_values())

            task = asyncio.create_task(
                update_price_periodically(sheet, row_index, symbol, float(price))
            )
            update_tasks[symbol] = task

        except Exception as e:
            logger.error(f"Failed to write to Google Sheets: {e}")
            raise HTTPException(status_code=500, detail="Failed to save data")

        return {"status": "success", "message": "Alert processed"}

    except HTTPException:
        raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail="Internal server error")