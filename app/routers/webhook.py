from fastapi import APIRouter, Request, HTTPException, BackgroundTasks
from datetime import datetime, timedelta
from typing import Dict
import asyncio
import logging
from app.services.telegram import TelegramBot
from app.services.cmc import CoinMarketCapService
from app.config import Config
import pytz
import requests

router = APIRouter()
logger = logging.getLogger(__name__)
cmc = CoinMarketCapService(api_key=Config.COINMARKETCAP_API_KEY)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
SPREADSHEET_ID = Config.ID_TABLES  # ID –≤–∞—à–µ–π Google –¢–∞–±–ª–∏—Ü—ã
MEXC_API_URL = "https://api.mexc.com/api/v3"

update_tasks: Dict[str, asyncio.Task] = {}


async def get_mexc_price(symbol: str) -> float:
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å MEXC"""
    try:
        # –û—á–∏—Å—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞
        clean_symbol = symbol.upper().strip()
        if not clean_symbol:
            raise ValueError("Empty symbol provided")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É (–æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
        trading_pair = f"{clean_symbol}USDT"

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.get(
            f"{MEXC_API_URL}/ticker/price",
            params={"symbol": trading_pair},
            timeout=10  # –£–≤–µ–ª–∏—á–∏–ª —Ç–∞–π–º–∞—É—Ç –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        )

        # –õ–æ–≥–∏—Ä—É–µ–º URL –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"MEXC API request URL: {response.url}")

        response.raise_for_status()

        data = response.json()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if not isinstance(data, dict) or 'price' not in data:
            raise ValueError(f"Invalid API response structure: {data}")

        price = float(data['price'])
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ —Ü–µ–Ω–∞ –¥–ª—è {clean_symbol}: {price}")

        return price

    except requests.exceptions.HTTPError as e:
        error_detail = f"{e.response.status_code} - {e.response.text}" if e.response else str(e)
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ MEXC API: {error_detail}")
        raise HTTPException(
            status_code=502,
            detail=f"MEXC API error: {error_detail}"
        )
    except requests.exceptions.RequestException as e:
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ MEXC API: {e}")
        raise HTTPException(
            status_code=503,
            detail="MEXC API temporarily unavailable"
        )
    except (ValueError, KeyError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        raise HTTPException(
            status_code=502,
            detail=f"Invalid API response: {str(e)}"
        )
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        raise HTTPException(
            status_code=500,
            detail="Internal server error"
        )


async def update_price_periodically(sheet, row_index: int, symbol: str, entry_price: float, action: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω —á–µ—Ä–µ–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª–∞"""
    moscow_tz = pytz.timezone('Europe/Moscow')

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞
        entry_time_str = sheet.cell(row_index, 4).value
        entry_time = moscow_tz.localize(datetime.strptime(entry_time_str, "%Y-%m-%d %H:%M:%S"))

        # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–∑–≤–∞–Ω–∏–µ, –∏–Ω—Ç–µ—Ä–≤–∞–ª)
        intervals = [
            ('15m', 15 * 60),  # 15 –º–∏–Ω—É—Ç
            ('1h', 60 * 60),  # 1 —á–∞—Å
            ('4h', 4 * 60 * 60),  # 4 —á–∞—Å–∞
            ('1d', 24 * 60 * 60)  # 1 –¥–µ–Ω—å
        ]

        # –ñ–¥–µ–º –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        for name, delay in intervals:
            try:
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                target_time = entry_time + timedelta(seconds=delay)
                sleep_duration = (target_time - datetime.now(moscow_tz)).total_seconds()

                if sleep_duration > 0:
                    logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {name} –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è {symbol} (—á–µ—Ä–µ–∑ {sleep_duration:.0f} —Å–µ–∫)")
                    await asyncio.sleep(sleep_duration)

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                current_price = await get_mexc_price(symbol)

                # –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                if action.lower() == 'buy':
                    change_pct = ((current_price - entry_price) / entry_price) * 100
                else:
                    change_pct = ((entry_price - current_price) / entry_price) * 100

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏
                col = 5 + intervals.index((name, delay)) * 2

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                sheet.update_cell(row_index, col, current_price)

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (–∫–∞–∫ —á–∏—Å–ª–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
                sheet.update_cell(row_index, col + 1, change_pct / 100)

                # –ü–æ–ª—É—á–∞–µ–º –±—É–∫–≤—É –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                col_letter = chr(ord('A') + col)
                percent_cell = f"{col_letter}{row_index}"

                # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∑–∞–ø—è—Ç–æ–π
                sheet.format(percent_cell, {
                    "numberFormat": {
                        "type": "PERCENT",
                        "pattern": "#,##0.00%"
                    }
                })

                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ —è—á–µ–π–∫–µ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º
                format_cell(sheet, row_index, col + 1, change_pct)

                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª {name} –¥–ª—è {symbol}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ {name}: {e}")
                continue

        logger.info(f"–í—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {symbol}")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if symbol in update_tasks:
            update_tasks.pop(symbol)


def format_cell(sheet, row: int, col: int, value: float):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –∫ —è—á–µ–π–∫–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    try:
        col_letter = chr(ord('A') + col - 1)  # -1 –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 1
        cell_reference = f"{col_letter}{row}"

        if value == 0:
            return

        if value >= 0:
            # –ó–µ–ª—ë–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            sheet.format(
                cell_reference,
                {"backgroundColor": {"red": 0.5, "green": 1, "blue": 0.5}}
            )
        else:
            # –ö—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            sheet.format(
                cell_reference,
                {"backgroundColor": {"red": 1, "green": 0.5, "blue": 0.5}}
            )
    except Exception as e:
        logger.error(f"Failed to format cell: {e}")


@router.post("/webhook")
async def webhook(request: Request):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
        if not hasattr(request.app.state, 'google_sheets'):
            logger.error("Google Sheets client not initialized")
            raise HTTPException(status_code=503, detail="Service unavailable")

        client = request.app.state.google_sheets

        try:
            sheet = client.open_by_key(SPREADSHEET_ID).sheet1
        except Exception as e:
            logger.error(f"Sheet access error: {str(e)}")
            raise HTTPException(status_code=500, detail="Spreadsheet access error")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...
        data = await request.json()
        logger.info(f"Processing data: {data}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        ticker = data.get('ticker', 'N/A')
        action = data.get('strategy.order.action', 'N/A')

        symbol = cmc.extract_symbol(ticker.lower())

        # –≠–º–æ–¥–∑–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
        action_emoji = 'üü¢' if action.lower() == 'buy' else 'üî¥' if action.lower() == 'sell' else '‚ö™'

        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
        logger.info(f"Extracted symbol: {symbol.lower()}")


        # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        market_cap, volume_24h = await cmc.get_market_data(symbol)
        current_price = await get_mexc_price(symbol)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        message = (
            f"{action_emoji} *{action.upper()}* \n\n"
            f"*{symbol.upper()}*\n\n"
            f"PRICE - *{current_price}$*\n"
            f"MARKET CAP - *{cmc.format_number(market_cap)}$*\n"
            f"24H VOLUME - *{cmc.format_number(volume_24h)}$*\n\n"
            f"Trading on the MEXC exchange - *https://promote.mexc.com/r/scn7giWq*"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        try:
            TelegramBot.send_message(text=message, chat_id=Config.CHAT_ID_TRADES)
            logger.info(message)
        except Exception as e:
            logger.error(f"Failed to send Telegram message: {e}")
            raise HTTPException(status_code=500, detail="Failed to send notification")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google –¢–∞–±–ª–∏—Ü—É
        try:
            sheet.append_row([
                symbol.upper(),
                action.lower(),
                current_price,
                datetime.now(pytz.timezone('Europe/Moscow')).strftime("%Y-%m-%d %H:%M:%S"),
                "", "", "", "", "", "", "", ""
            ])

            row_index = len(sheet.get_all_values())

            task = asyncio.create_task(
                update_price_periodically(sheet, row_index, symbol, float(current_price), action)
            )
            update_tasks[symbol] = task

        except Exception as e:
            logger.error(f"Failed to write to Google Sheets: {e}")
            raise HTTPException(status_code=500, detail="Failed to save data")

        return {"status": "success", "message": "Alert processed"}

    except HTTPException:
        raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail="Internal server error")