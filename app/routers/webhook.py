from fastapi import APIRouter, Request, HTTPException, Depends
from sqlalchemy.orm import Session
from pydantic import BaseModel
from datetime import datetime
import logging
from app.models import Trade, Counter
from app.database import get_db
from app.services.telegram import TelegramBot
from app.services.coingecko import CoinGeckoService
from app.config import Config

router = APIRouter()
logger = logging.getLogger(__name__)
coingecko = CoinGeckoService()


class WebhookPayload(BaseModel):
    ticker: str
    close: str
    strategy: dict


@router.post("/webhook")
async def webhook(request: Request, db: Session = Depends(get_db)):
    try:

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç TradingView
        data = await request.json()
        logger.info(f"Received data: {data}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        ticker = data.get('ticker', 'N/A')  # –ü—Ä–∏–º–µ—Ä: BTCUSDT.P, ETHUSDT.P –∏ —Ç.–¥.
        close = data.get('close', 'N/A')
        action = data.get('strategy.order.action', 'N/A')

        if action.lower() == 'buy':
            action_emoji = 'üü¢'
        elif action.lower() == 'sell':
            action_emoji = 'üî¥'
        else:
            action_emoji = '‚ö™'  # –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–ª—ã–π –∫—Ä—É–∂–æ–∫

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã –∏–∑ —Ç–∏–∫–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT.P ‚Üí BTC)
        symbol = coingecko.extract_symbol(ticker.lower())
        logger.info(f"Extracted symbol: {symbol.lower()}")

        try:
            price = float(close)
        except ValueError:
            logger.error(f"Invalid price format: {close}")
            raise HTTPException(status_code=400, detail="Invalid price format")

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é –∏ –æ–±—ä–µ–º –∑–∞ 24 —á–∞—Å–∞
        market_cap, volume_24h = coingecko.get_market_data(symbol)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message = (
            f"{action_emoji} *{action.upper()}* \n\n"
            f"*{symbol.upper()}*\n\n"
            f"PRICE - *{price}$*\n"
            f"MARKET CAP - *{coingecko.format_number(market_cap)}$*\n"
            f"24H VOLUME - *{coingecko.format_number(volume_24h)}$*\n\n"
            f"Trading on the MEXC exchange - *https://promote.mexc.com/r/scn7giWq*"
        )

        try:
            TelegramBot.send_message(text=message, chat_id=Config.CHAT_ID_TRADES)  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä
        except Exception as e:
            logger.error(f"Failed to send Telegram message: {e}")
            raise HTTPException(status_code=500, detail="Failed to send notification")

        logger.info(f"Message to be sent: {message}")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        trade = Trade(action=action.lower(), symbol=symbol, price=price, timestamp=datetime.utcnow())
        db.add(trade)
        db.commit()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        return {"status": "success", "message": "Alert processed"}

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        print("Error:", str(e))
        raise HTTPException(status_code=500, detail=str(e))